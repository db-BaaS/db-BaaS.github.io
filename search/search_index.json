{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Backend-as-a-Service (BaaS) is a cloud model that provides pre-built backend services (<code>authentication</code>, <code>databases</code>, <code>APIs</code>, <code>push notifications</code>) via SDKs/APIs, enabling developers to focus exclusively on frontend development</p> Tip <ul> <li>Key features: Managed infrastructure, serverless architecture, and pre-configured backend components.</li> <li>Examples: Firebase, AWS Amplify, Parse.</li> </ul>"},{"location":"#core-value-proposition","title":"Core Value Proposition","text":"<p>BaaS eliminates backend complexity by outsourcing:</p> <ol> <li>Database management (e.g., real-time sync in Firebase).</li> <li>User authentication (OAuth, social logins).</li> <li>Scalability (automatic resource allocation).</li> </ol> <p>For app development, BaaS accelerates time-to-market while reducing DevOps overhead.</p> <p>If \"baas\" was intended as a typo, BaaS remains the correct term for backend cloud services.</p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Backend-as-a-Service: What Is It and How Can It Be Used?</li> <li>What is BaaS and How Can it Help with App Development?</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"db/firebase/overview/","title":"Firebase","text":""},{"location":"db/supabase/overview/","title":"Overview","text":""},{"location":"db/supabase/overview/#overview","title":"Overview","text":"<pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt;\n  createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  );\n</code></pre> <p>At this point, you have a function called <code>createSupabaseClient()</code> that initializes a new Supabase client with the given values. This function can now be imported from any other file.</p>"},{"location":"db/supabase/overview/#utilizing-createbrowserclient-on-the-frontend","title":"Utilizing <code>createBrowserClient</code> on the frontend","text":"<p>Let\u2019s start by solving the frontend problem first and then go back and re-evaluate the details of the backend problem.</p> <p>Here, <code>@supabase/supabase-js</code> is always the base package that you install in any JavaScript-based environment where you use the Supabase JavaScript client. Then, there is a complementary package from Supabase called <code>@supabase/ssr</code>. It is framework-independent but wraps functionality to make cookie management easy on both the frontend and backend so that you can log in on the frontend and use the authentication on the backend and vice versa. We\u2019ll use the package to create a frontend Supabase client.</p> <p>Although ssr stands for server-side rendering, it comes packed with a function called <code>createBrowserClient</code>, which solves our first problem, recreation: it is a wrapper on top of the createClient function from <code>@supabase/supabase-js</code> and uses a Singleton pattern. So, you can call it as often as you want, and the client is still just created once.</p> <p>To use it, first, install the package with <code>npm install @supabase/ssr</code>. Then, go to your <code>supabase-utils/client.js</code> file. Here, you will see the following code:</p> <pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt; createClient(...);\n</code></pre> <p>Now, replace createClient with the <code>createBrowserClient</code> import, as follows:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\n\nexport const createSupabaseClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>This would be sufficient, but I want to do two more things to add more clarity that this is about the frontend:</p> <ol> <li> <p>First, rename <code>createSupabaseClient</code> to <code>getSupabaseBrowserClient</code> so that it looks like this:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\nexport const getSupabaseBrowserClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>Just by changing the name, it\u2019s clearer that we aren\u2019t recreating the client all the time and that we\u2019re supposed to use this on the frontend.</p> </li> <li> <p>Second, rename <code>client.js</code> to <code>browserClient.js</code> as this name provides more details about what it is \u2013 that is, a browser-targeted Supabase client. Don\u2019t forget to adapt your existing <code>createSupabaseClient</code> imports so that they match the name changes.</p> </li> </ol> <p>With that, problem one has been solved. Now, let\u2019s get back to problem two \u2013 the backend.</p>"},{"location":"db/supabase/overview/#reference","title":"Reference","text":"<ul> <li>Building Production-Grade Web Applications with Supabase by David Lorenz</li> </ul>"}]}