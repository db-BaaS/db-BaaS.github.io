{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Backend-as-a-Service (BaaS) is a cloud model that provides pre-built backend services (<code>authentication</code>, <code>databases</code>, <code>APIs</code>, <code>push notifications</code>) via SDKs/APIs, enabling developers to focus exclusively on frontend development</p> Tip <ul> <li>Key features: Managed infrastructure, serverless architecture, and pre-configured backend components.</li> <li>Examples: Firebase, AWS Amplify, Parse.</li> </ul>"},{"location":"#core-value-proposition","title":"Core Value Proposition","text":"<p>BaaS eliminates backend complexity by outsourcing:</p> <ol> <li>Database management (e.g., real-time sync in Firebase).</li> <li>User authentication (OAuth, social logins).</li> <li>Scalability (automatic resource allocation).</li> </ol> <p>For app development, BaaS accelerates time-to-market while reducing DevOps overhead.</p> <p>If \"baas\" was intended as a typo, BaaS remains the correct term for backend cloud services.</p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Backend-as-a-Service: What Is It and How Can It Be Used?</li> <li>What is BaaS and How Can it Help with App Development?</li> <li>Github: Building-Production-Grade-Web-Applications-with-Supabase</li> </ul>"},{"location":"#books","title":"Books","text":""},{"location":"tech-books/","title":"Tech Books","text":""},{"location":"tech-books/#technology-books","title":"Technology Books","text":""},{"location":"tech-books/#self-help-books","title":"Self help books","text":"<p>Make life worthwhile </p>"},{"location":"tech-books/#reference","title":"Reference","text":"<ul> <li>Tech Books :github.com</li> <li>E-Books Directory</li> <li>FreeComputerBooks.com</li> </ul>"},{"location":"baas/history/","title":"History","text":""},{"location":"baas/history/#history","title":"History","text":""},{"location":"baas/history/#when-did-backend-as-a-service-baas-start","title":"\ud83d\udd70\ufe0f When Did Backend-as-a-Service (BaaS) Start?","text":"Origins <ul> <li>Concept emerged around 2011\u20132012.</li> <li> <p>First known BaaS providers:</p> <ul> <li>Parse (founded in 2011, acquired by Facebook in 2013)</li> <li>Firebase (founded in 2011, acquired by Google in 2014)</li> <li>Others like Kinvey, StackMob, and Backendless also launched during this time.</li> </ul> </li> </ul> <p>These platforms offered mobile and web developers pre-built backend tools so they could focus on the frontend/UI without building servers or APIs from scratch.</p>"},{"location":"baas/history/#who-invented-baas-and-why","title":"\ud83d\udc68\u200d\ud83d\udd2c Who Invented BaaS and Why?","text":"<p>There isn't one single inventor, but several startups around the same time began solving the same pain point: mobile and web developers wasting time reinventing the backend wheel.</p> Why It Was Created <ul> <li> <p>Developers needed to:</p> <ul> <li>Handle user authentication</li> <li>Store and retrieve data</li> <li>Send push notifications</li> <li>Manage file uploads</li> </ul> </li> <li> <p>All of this required backend expertise, server infrastructure, and maintenance.</p> </li> <li>BaaS solved this by providing pre-built APIs, SDKs, and cloud infrastructure for common backend needs.</li> </ul>"},{"location":"baas/history/#when-to-use-baas","title":"\u2705 When to Use BaaS","text":"<p>BaaS is a great fit when:</p> Scenario Why BaaS Works \ud83d\ude80 You want to launch quickly Skip backend boilerplate; use built-in Auth, DB, APIs \ud83e\uddea You\u2019re building a prototype or MVP Focus on the product, not infrastructure \ud83e\uddd1\u200d\ud83d\udcbb You have limited backend expertise Handle backend via simple SDKs or dashboards \ud83d\udcf2 You\u2019re building mobile/web apps Great for chat, social apps, and real-time experiences \ud83e\udde9 You want real-time data sync Firebase, Supabase, etc., offer easy realtime capabilities \ud83c\udf10 You don\u2019t want to manage servers Everything is hosted and scalable"},{"location":"baas/history/#when-not-to-use-baas","title":"\ud83d\udeab When Not to Use BaaS","text":"Scenario Why BaaS Might Be Limiting \ud83d\udd12 You need full control over infrastructure/security BaaS = less control, vendor lock-in \ud83e\uddf1 You have complex custom backend logic Limited flexibility with platform constraints \ud83d\udcc8 Your app has unique scaling needs BaaS platforms can be expensive or inflexible at scale \ud83e\udde0 You want to learn backend engineering BaaS hides backend complexity, which is bad for learning \ud83c\udfe2 You're building enterprise systems with legacy integration May require custom backend architectures"},{"location":"baas/history/#summary","title":"\ud83d\udd1a Summary","text":"<ul> <li>Came around: 2011\u20132012</li> <li>Invented by: Companies like Parse, Firebase (not a single person)</li> <li>Why created: To save developers time by offering pre-built backend tools</li> <li>Use it when: You need speed, simplicity, or real-time sync without backend hassle</li> <li>Avoid it when: You need fine control, complex logic, or want to own your backend</li> </ul>"},{"location":"baas/history/#question","title":"Question","text":"<p>\ud83d\udca1 Short Answer:</p> <p>Using BaaS means you're still using a backend \u2014 you\u2019re just not building or managing it yourself.</p> <p>\ud83d\udd0d What Happens When You Use BaaS?</p> Without BaaS With BaaS You build your own backend (APIs, DB, Auth) The backend is provided as a service You manage servers, security, scaling The BaaS provider handles infrastructure You write backend code (Node.js, Python, etc.) You use SDKs or APIs to interact with backend features Full flexibility, high responsibility Less flexibility, faster development <p>\ud83e\udde0 So, is there a backend with BaaS?</p> <p>Yes, there is a backend \u2014 it's just pre-built and hosted by the BaaS provider (like Firebase, Supabase, etc.).</p> <p>You interact with it via:</p> <ul> <li>SDKs (for web/mobile)</li> <li>REST or GraphQL APIs</li> <li>Admin dashboards</li> </ul> <p>You don't need to:</p> <ul> <li>Write backend code (unless you want to extend it)</li> <li>Set up servers or databases</li> <li>Handle scaling, uptime, or security patches</li> </ul> <p>\u2705 So Use BaaS If:</p> <ul> <li>You want to build an app fast</li> <li>You don't want to write custom backend code</li> <li>You\u2019re fine using the backend \u201cas-is\u201d with what the platform offers</li> </ul> <p>\u274c Avoid BaaS If:</p> <ul> <li>You need complex business logic that BaaS doesn\u2019t support</li> <li>You want to build and own your backend completely</li> <li>You need full control over performance, security, or compliance</li> </ul> <p>\u2705 Standard Practice: Mixed Approaches Are Common</p> <p>In modern development, it's very common for teams to use BaaS for some features, and a custom backend (e.g., Django API) for others.</p> <p>So the short answer is:</p> <p>Yes \u2014 many developers use BaaS (like Firebase or Supabase) alongside their own custom backends like Django.</p> \ud83d\udd27 Common Practices You\u2019ll See <ol> <li> <p>Full BaaS Stack (No Django backend)</p> <ul> <li>Used in MVPs, small apps, startups</li> <li>All backend needs (auth, DB, storage) handled by Firebase, Supabase, or Appwrite</li> <li>No custom backend code</li> </ul> </li> <li> <p>Hybrid: BaaS + Custom Backend (Django, Node.js, etc.)</p> <ul> <li>Very common in mid to large-scale apps</li> <li>Use BaaS for Auth, Realtime, File Storage</li> <li>Use Django (or any API framework) for custom business logic, integrations, or secure operations</li> <li>Best of both worlds: fast dev + full control</li> </ul> </li> <li> <p>Custom Backend Only (No BaaS)</p> <ul> <li>Used in enterprise, fintech, healthcare apps</li> <li>Full control over security, database, logic</li> <li>More work, more flexibility</li> </ul> </li> </ol> <p>\ud83e\uddf1 Why Use Django With BaaS?</p> What Django Does Well What BaaS Handles Easily Custom API endpoints Realtime data sync Complex business logic User authentication Integrations with external systems File storage (images, videos) Custom admin interfaces (Django admin) Push notifications, analytics (in Firebase) <p>\ud83d\udd1a Conclusion:</p> <ul> <li>Standard practice \u2260 only BaaS or only Django</li> <li>Many teams combine BaaS with Django or another backend framework</li> <li>This gives you speed and control</li> </ul>"},{"location":"baas/overview/","title":"Overview","text":""},{"location":"baas/overview/#overview","title":"Overview","text":"<p>Backend-as-a-Service (BaaS) is a cloud service model in which developers outsource all the behind-the-scenes aspects of a web or mobile application so that they only have to write and maintain the frontend.</p> <p>BaaS vendors provide pre-written software for activities that take place on servers, such as user authentication, database management, remote updating, and push notifications (for mobile apps), as well as cloud storage and hosting.</p> What is Backend as a Service (BaaS)? <p>Backend as a Service (BaaS) is a cloud service model that provides developers with a way to connect their web and mobile applications to cloud-based servers via APIs and SDKs. BaaS platforms offer a suite of features that typically include database management, user authentication, cloud storage, push notifications, server-side logic, and more, without the need for developers to manage or maintain the underlying server infrastructure.</p> <p>BaaS is like that magical box for app developers. It gives them pre-built pieces of the castle's interior (or, in app terms, pre-built backend services). This means developers can just pick what they need (like user login or data storage), and it's ready to use in their app. They don't have to build these services from scratch. It's faster and lets them focus on making the app look good and work well \u2014 just like focusing on building the exterior of your LEGO castle.</p> <p>Backend as a service (BaaS) is a third-party service that lets you develop an app or a website without bothering with its backend.</p> <p>When using BaaS, you leave time-consuming and expensive backend tasks to a BaaS provider while channeling your efforts into the front-end.</p> <p></p> <p> </p>"},{"location":"baas/overview/#what-is-included-in-baas","title":"What is included in BaaS?","text":"<p>BaaS providers offer a number of server-side capabilities. For instance:</p> <ul> <li>Database management</li> <li>Cloud storage (for user-generated content)</li> <li>User authentication</li> <li>Push notifications</li> <li>Remote updating</li> <li>Hosting</li> <li>Other platform- or vendor-specific functionalities; for instance, Firebase offers Google search indexing</li> </ul> <p>BaaS and MBaaS providers include Google Firebase and Microsoft Azure.</p>"},{"location":"baas/overview/#reference","title":"Reference","text":"<ul> <li>What is BaaS? | Backend-as-a-Service vs. serverless</li> <li>Why would you use Backend as a Service (BaaS)?</li> <li>Backend as a Service (BaaS)</li> <li>First Look at Baas</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2025/06/11/-what-is-npx-really/","title":"\ud83d\udd27 What Is npx Really?","text":""},{"location":"blog/2025/06/11/-what-is-npx-really/#what-is-npx-really","title":"\ud83d\udd27 What Is npx Really?","text":"<p><code>npx</code> is a CLI tool that comes with <code>npm</code> (Node Package Manager). It's designed to execute binaries (i.e., CLI tools) from Node packages \u2014 without requiring a global installation.</p> <p>Introduced in <code>npm 5.2.0</code>, <code>npx</code> is especially useful for:</p> <ul> <li>Running commands from packages that aren\u2019t installed globally</li> <li>Testing packages quickly</li> <li>Running scripts from your <code>node_modules/.bin</code></li> <li>Executing GitHub gists or remote code</li> </ul>"},{"location":"blog/2025/06/11/-what-is-npx-really/#how-npx-works-internals","title":"\ud83e\udde0 How npx Works (Internals)","text":"<p>When you type:</p> <pre><code>npx &lt;package&gt; [...args]\n</code></pre> <p>Here\u2019s what happens behind the scenes:</p> <ol> <li> <p>Resolution Phase</p> <ul> <li>Checks if the package name is a local binary in <code>node_modules/.bin</code></li> <li>If not found, queries the npm registry for the package</li> <li>Downloads it to a temporary directory (e.g., <code>/tmp</code>) if not locally installed</li> </ul> </li> <li> <p>Execution Phase</p> <ul> <li>Executes the binary, passing any arguments you gave</li> <li>Uses the environment (like <code>PATH</code>) to include that temporary binary location</li> </ul> </li> <li> <p>Cleanup Phase</p> <ul> <li>Deletes the temporary installation unless <code>--no-delete</code> is used</li> <li>Leaves no trace unless explicitly told to persist (via <code>--package</code> or installation)</li> </ul> </li> </ol>"},{"location":"blog/2025/06/11/-what-is-npx-really/#practical-examples","title":"\ud83e\uddea Practical Examples","text":"<ol> <li> <p>Run a one-time CLI command:</p> <pre><code>npx cowsay \"Hello from npx!\"\n</code></pre> <p>This uses the <code>cowsay</code> package temporarily and prints a cow saying your message.</p> </li> <li> <p>Run a package script locally (without installing globally):</p> <pre><code>npx eslint src/\n</code></pre> <p>This executes <code>eslint</code> from <code>node_modules/.bin</code> if it exists, or downloads it if not.</p> </li> <li> <p>Create new projects (scaffolders):</p> <pre><code>npx create-react-app my-app\n</code></pre> <p>No need to globally install <code>create-react-app</code>; <code>npx</code> ensures you're using the latest version every time.</p> </li> <li> <p>Execute a specific version of a package:</p> <pre><code>npx -p typescript@4.8 tsc --version\n</code></pre> <p>This installs and runs TypeScript 4.8 specifically.</p> </li> <li> <p>Run a GitHub-hosted package (advanced):</p> <pre><code>npx github:username/repo\n</code></pre> <p>You can even run GitHub packages directly.</p> </li> </ol>"},{"location":"blog/2025/06/11/-what-is-npx-really/#gotchas-tips","title":"\u26a0\ufe0f Gotchas &amp; Tips","text":"<ul> <li> <p>npm 7+ deprecates <code>npx</code> in favor of <code>npm exec</code>. (<code>npm exec</code> is safer and more consistent in scripts.)</p> <pre><code>npm exec -- package-name\n</code></pre> </li> <li> <p>Slow on first run: If the package isn't cached, it downloads every time.</p> </li> <li> <p>You can override the binary name with:</p> <pre><code>npx --package cowsay \"cowsay\" \"Hello!\"\n</code></pre> </li> <li> <p>Aliases and scripts can benefit: In <code>package.json</code> scripts, use <code>npx</code> to avoid setup for tools like Prettier, ESLint, etc.</p> </li> </ul>"},{"location":"blog/2025/06/11/-what-is-npx-really/#advanced-flags","title":"\ud83d\udee0 Advanced Flags","text":"Flag Description <code>--package</code> or <code>-p</code> Use this specific package <code>--yes</code> or <code>-y</code> Skip prompts (especially useful for GitHub commands) <code>--node-arg=--foo</code> Pass Node.js args directly <code>--call</code> Used with scripts that return functions <code>--no-install</code> Avoid downloading if not found locally <code>--shell</code> Force command to run in shell"},{"location":"blog/2025/06/11/-what-is-npx-really/#npx-vs-npm-exec","title":"\ud83e\udde0 <code>npx</code> vs <code>npm exec</code>","text":"Feature <code>npx</code> <code>npm exec</code> Legacy support \u2705 \u274c (newer) CLI flexibility \u2705 \u2705 Consistent behavior \u274c (some quirks) \u2705 Recommended future \u274c \u2705"},{"location":"blog/2025/06/11/-what-is-npx-really/#summary","title":"Summary","text":"Concept npx Behavior Global install? \u274c No need Caching? \u2705 Yes (short-term) Auto install? \u2705 Yes (unless <code>--no-install</code>) Runs local bin? \u2705 Priority over remote Supports versioning? \u2705 Yes Executes scripts? \u2705 Easily"},{"location":"db/firebase/overview/","title":"Firebase","text":""},{"location":"db/supabase/history/","title":"History","text":""},{"location":"db/supabase/history/#history","title":"History","text":""},{"location":"db/supabase/history/#unveiling-the-inner-workings-of-supabase-and-introducing-the-books-project","title":"Unveiling the Inner Workings of Supabase and Introducing the Book\u2019s Project","text":"<p>In 2000, I started playing around with HTML, which had been around for 10 years at the time. Google, which was then only two years old, was already becoming popular. Back then, the internet was slow and expensive, and my connection was a snail-paced 56 Kbps, miles behind today\u2019s lightning-fast 1 Gbps, which is 18,000 times faster.</p> <p>However, it was a great time to start with web development as the field wasn\u2019t overly complex. Making dynamic websites typically meant using PHP and MySQL, and things such as \u201cJavaScript Frameworks\u201d did not even exist yet. At that time, authentication was simpler but not very secure, and HTTPS (which is represented by the padlock icon in your browser) was rare. To log in, you had to enter a username and password on a website, and the server created a session cookie to connect you to your account on the backend</p> <p>Fast forward to today, when starting out with web development can be confusing. There are tons of libraries, frameworks, and tech choices to make.</p> <p>However, as most of them are some kind of interactive service, there are underlying needs such as file storage, databases, and authentication that are always the same for each project. That\u2019s where Platform as a Service/Backend as a Service (PaaS/BaaS) comes in.</p> <p>Supabase is a standout option for this. Choosing Supabase will save you lots of time, as I can personally attest\u2014usually multiple weeks or even months of work. Even if all you need is a database to store data in, PaaS solutions such as Supabase will allow you to iteratively add the capabilities of the PaaS solution to your application.</p>"},{"location":"db/supabase/history/#reference","title":"Reference","text":"<ul> <li>Building Production-Grade Web Applications with Supabase by David Lorenz</li> </ul>"},{"location":"db/supabase/installation/","title":"Installation","text":""},{"location":"db/supabase/installation/#installation","title":"Installation","text":"Install the Supabase library in your project<pre><code>npm install @supabase/supabase-js\n</code></pre>"},{"location":"db/supabase/installation/#installing-the-supabase-cli","title":"Installing the Supabase CLI","text":"bash<pre><code>npm install supabase --save-dev\n</code></pre> <p>Before doing anything else, you\u2019ll want to install the Supabase CLI as it will \u2013 besides other great features \u2013 allow us to spin up a local Supabase instance with no effort.</p> <p>In theory, you can install the Supabase CLI globally with package managers such as brew or scoop. However, from my experience, I advise against them as they usually confuse more than they help, particularly when you have multiple projects, as well as a different version of the Supabase CLI than other people in your team.</p> <p>In short, install the Supabase CLI via <code>npm install supabase --save-dev</code> as a development dependency in every project where you want to use Supabase.</p> <p>Afterward, you can test if the installation succeeded by running <code>npx supabase --help</code>. Running this command should not result in you being asked to install the CLI \u2013since you\u2019ve done that already, it should quickly output helpful information about the CLI.</p>"},{"location":"db/supabase/installation/#running-your-first-supabase-instance-on-your-machine","title":"Running your first Supabase instance on your machine","text":"<p>When you go on supabase.com, sign in, and create a new project, that\u2019s your Supabase instance. However, we want to run an instance locally on our computer. Let\u2019s see how to do that.</p>"},{"location":"db/supabase/installation/#initializing-a-new-local-supabase-instance","title":"\u2b50 Initializing a new local Supabase instance","text":"<p>Having a local installation is crucial in development as it allows us to test things before we deploy them. Hence, even if you plan to use the awesome supabase.com platform, you\u2019ll be better off also having a local installation.</p> bash<pre><code>npx supabase init\n</code></pre> <p>The command also creates a <code>config.toml</code> file in that new directory, which contains a complete, working configuration that the CLI uses to run your local setup. You can have a peek at it but don\u2019t expect to understand it just yet.</p>"},{"location":"db/supabase/installation/#starting-your-first-supabase-instance","title":"\u2b50 Starting your first Supabase instance","text":"<p>Now that you\u2019ve initialized the required files for a local instance, you\u2019ll want to get it up and running so that you get the information from Supabase about the services it started, as well as the credentials it was deployed with.</p> <p>This will contain everything we need to make a connection to Supabase.</p> bash<pre><code>npx supabase start\n</code></pre> <p>So, inside your <code>/your-path/my-project/supabase</code> project folder, call <code>npx supabase start</code>. This will automatically trigger the underlying Docker setup, pull all the required Docker images, and spin them up \u2013 in other words, the command creates and starts a fully running Supabase instance without you having to configure it.</p> <pre><code>Digest: sha256:8ace6e32e26d30a352b55170ff9953b554baa831d7ab61cd0520316793cb3de1\nStatus: Downloaded newer image for public.ecr.aws/supabase/studio:2025.06.02-sha-8f2993d\nStarted supabase local development setup.\n\n         API URL: http://127.0.0.1:54321\n     GraphQL URL: http://127.0.0.1:54321/graphql/v1\n  S3 Storage URL: http://127.0.0.1:54321/storage/v1/s3\n          DB URL: postgresql://postgres:postgres@127.0.0.1:54322/postgres\n      Studio URL: http://127.0.0.1:54323\n    Inbucket URL: http://127.0.0.1:54324\n      JWT secret: super-secret-jwt-token-with-at-least-32-characters-long\n        anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\nservice_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU\n   S3 Access Key: 625729a08b95bf1b7ff351a663f3a23c\n   S3 Secret Key: 850181e4652dd023b7a98c58ae0d2d34bd487ee0cc3254aed6eda37307425907\n       S3 Region: local\n</code></pre> <p>This means your local instance is running. I recommend that you just copy all of the output you receive and save it somewhere for easy access later.</p> Tip <p>The Terminal output provides a summary of the things you\u2019ll need to connect to Supabase (it is not a list of services started). Let\u2019s go through them one by one:</p> <ul> <li> <p>API URL: The connection URL for our Supabase instance. It is the unified URL that takes all your API calls and, depending on the path, forwards them to the correct service to be processed.</p> </li> <li> <p>GraphQL URL: When explaining the PostgREST service in Chapter 1, I mentioned that Supabase allows you to work with GraphQL if that is your preferred way of working. This is the URL you\u2019ll need if you want to fetch data via GraphQL.</p> </li> <li> <p>DB URL: This is the connection URL of the database itself, bypassing the other services. It is already in the form of a PostgreSQL connection string and includes the PostgreSQL protocol, username, and password. For most use cases, you won\u2019t need this DB URL as you will be using the API URL \u2013 or more specifically, the Supabase client \u2013 for everything related to your project.</p> </li> <li> <p>Studio URL: This is the dashboard where we will conveniently manage and structure data within Supabase.</p> </li> <li> <p>Inbucket URL: This is a special service that\u2019s deployed to simplify your local development process. Every application that interacts with users needs to send emails \u2013 for example, when logging in, when changing an email address, or when resetting a password. To send emails, you need an email server. In development mode, you usually don\u2019t want to send out real emails to real people. Instead, you\u2019ll want to check and verify that the content in those emails is correct and functional.</p> <p>Inbucket is a dummy mail server.</p> </li> <li> <p>JWT secret: JWT is the short form of JSON Web Token and is an encrypted JSON-formatted value that usually contains authentication data.</p> </li> <li> <p>anon key: This is the anonymous key that, complementary to the API URL, allows us to connect to our instance with the Supabase library.</p> </li> <li> <p>service_role key: The service role key sounds non-threatening but is the superadmin key and allows any kind of manipulation. You should never use it in the frontend as someone could steal it.</p> </li> </ul>"},{"location":"db/supabase/installation/#managing-multiple-local-supabase-instances","title":"Managing multiple local Supabase instances","text":"<p>Developers often work on many different projects. Running multiple servers of any kind at the same time can be done by changing the port configuration (one on <code>localhost:3000</code>, the other on localhost:3001, and so on). But what if you have three projects, all using their own Supabase instances? Can we have three local Supabase instances run in parallel at the same time? Let\u2019s have a look at the options for how to handle this.</p>"},{"location":"db/supabase/installation/#option-1-the-start-stop-technique","title":"\u2747\ufe0f Option 1 \u2013 the start-stop technique","text":"<p>This is the recommended option when the projects are separated and you can spare a minute to switch between instances.</p> <p>Imagine that you have two projects. If you currently run the instance from project 1, then go to the project directory and run <code>npx supabase stop</code>, it will automatically back up your data locally.</p> <p>Now, if you go to project 2 and run <code>npx supabase start</code>, the project 2 instance will be running and consider the project 1 instance to be in sleep mode.</p>"},{"location":"db/supabase/installation/#option-2-change-ports","title":"\u2747\ufe0f Option 2 \u2013 change ports","text":"<p>Inside <code>config.toml</code>, you can change the ports that Supabase uses for its services. For example, for Studio, you\u2019ll see something like this:</p> <pre><code>[studio]\nport = 54323\n</code></pre> <p>Change <code>port</code> to something unique, such as <code>port=9100</code>. Upon doing this, for this project, your Supabase Studio service will run on <code>localhost:9100</code>.</p> <p>Change port to something unique, such as <code>port=9100</code>. Upon doing this, for this project, your Supabase Studio service will run on <code>localhost:9100</code>.</p>"},{"location":"db/supabase/installation/#connecting-to-supabase-with-the-supabase-javascript-client","title":"Connecting to Supabase with the Supabase JavaScript Client","text":"Install the Supabase library in your project<pre><code>npm install @supabase/supabase-js\n</code></pre>"},{"location":"db/supabase/overview/","title":"Overview","text":""},{"location":"db/supabase/overview/#overview","title":"Overview","text":"<pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt;\n  createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  );\n</code></pre> <p>At this point, you have a function called <code>createSupabaseClient()</code> that initializes a new Supabase client with the given values. This function can now be imported from any other file.</p>"},{"location":"db/supabase/overview/#utilizing-createbrowserclient-on-the-frontend","title":"Utilizing <code>createBrowserClient</code> on the frontend","text":"<p>Let\u2019s start by solving the frontend problem first and then go back and re-evaluate the details of the backend problem.</p> <p>Here, <code>@supabase/supabase-js</code> is always the base package that you install in any JavaScript-based environment where you use the Supabase JavaScript client. Then, there is a complementary package from Supabase called <code>@supabase/ssr</code>. It is framework-independent but wraps functionality to make cookie management easy on both the frontend and backend so that you can log in on the frontend and use the authentication on the backend and vice versa. We\u2019ll use the package to create a frontend Supabase client.</p> <p>Although ssr stands for server-side rendering, it comes packed with a function called <code>createBrowserClient</code>, which solves our first problem, recreation: it is a wrapper on top of the createClient function from <code>@supabase/supabase-js</code> and uses a Singleton pattern. So, you can call it as often as you want, and the client is still just created once.</p> <p>To use it, first, install the package with <code>npm install @supabase/ssr</code>. Then, go to your <code>supabase-utils/client.js</code> file. Here, you will see the following code:</p> <pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt; createClient(...);\n</code></pre> <p>Now, replace createClient with the <code>createBrowserClient</code> import, as follows:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\n\nexport const createSupabaseClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>This would be sufficient, but I want to do two more things to add more clarity that this is about the frontend:</p> <ol> <li> <p>First, rename <code>createSupabaseClient</code> to <code>getSupabaseBrowserClient</code> so that it looks like this:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\nexport const getSupabaseBrowserClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>Just by changing the name, it\u2019s clearer that we aren\u2019t recreating the client all the time and that we\u2019re supposed to use this on the frontend.</p> </li> <li> <p>Second, rename <code>client.js</code> to <code>browserClient.js</code> as this name provides more details about what it is \u2013 that is, a browser-targeted Supabase client. Don\u2019t forget to adapt your existing <code>createSupabaseClient</code> imports so that they match the name changes.</p> </li> </ol> <p>With that, problem one has been solved. Now, let\u2019s get back to problem two \u2013 the backend.</p>"},{"location":"db/supabase/overview/#reference","title":"Reference","text":"<ul> <li>Building Production-Grade Web Applications with Supabase by David Lorenz</li> </ul>"},{"location":"db/supabase/supabase-client/","title":"Supbase Client","text":""},{"location":"db/supabase/supabase-client/#understanding-the-base-supabase-client","title":"Understanding the base Supabase client","text":"<p>The <code>@supabase/supabase-js</code> client is a versatile isomorphic package that can run anywhere that JavaScript runs \u2013 whether it\u2019s in the browser, on the server (Node.js), or even within a native iOS app (for example, with React Native).</p> <p>This flexibility allows developers to easily switch between environments without modifying their code.</p> Note <p>We\u2019ve already initialized a Supabase client with the plain, framework-independent Supabase JavaScript library (@supabase/supabase-js) and fetched an empty list of buckets from the storage service. So, everything seems to be working.</p> <p>Why would we need to do anything else?</p> <p>Well, there are two problems to solve:</p> <ul> <li> <p>If we need the Supabase client in multiple components on the frontend, we would need to call <code>createSupabaseClient()</code> multiple times, which would recreate a client multiple times. That is unnecessary. Also, the default Supabase client from <code>@supabase/supabase-js</code> will not store anything the server-side will be able to read. So, it will work for a solely frontend-based application.</p> </li> <li> <p>Although we can use <code>createSupabaseClient()</code> on the backend as well, it will not work as expected there and always assumes that no user is logged in, even if you are logged in (due to missing cookie management, as mentioned in the previous subsection).</p> </li> </ul> <p>Let me introduce you to the framework-independent <code>@supabase/ssr</code> package, which solves the process of instantiating a browser-based frontend client as well as a non-browser-based backend client in a streamlined way.</p>"},{"location":"db/supabase/supabase-client/#reference","title":"Reference","text":""},{"location":"blog/archive/2025/","title":"2025","text":""}]}