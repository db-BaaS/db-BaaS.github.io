{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Backend-as-a-Service (BaaS) is a cloud model that provides pre-built backend services (<code>authentication</code>, <code>databases</code>, <code>APIs</code>, <code>push notifications</code>) via SDKs/APIs, enabling developers to focus exclusively on frontend development</p> Tip <ul> <li>Key features: Managed infrastructure, serverless architecture, and pre-configured backend components.</li> <li>Examples: Firebase, AWS Amplify, Parse.</li> </ul>"},{"location":"#core-value-proposition","title":"Core Value Proposition","text":"<p>BaaS eliminates backend complexity by outsourcing:</p> <ol> <li>Database management (e.g., real-time sync in Firebase).</li> <li>User authentication (OAuth, social logins).</li> <li>Scalability (automatic resource allocation).</li> </ol> <p>For app development, BaaS accelerates time-to-market while reducing DevOps overhead.</p> <p>If \"baas\" was intended as a typo, BaaS remains the correct term for backend cloud services.</p>"},{"location":"#reference","title":"Reference","text":"<ul> <li>Backend-as-a-Service: What Is It and How Can It Be Used?</li> <li>What is BaaS and How Can it Help with App Development?</li> <li>Github: Building-Production-Grade-Web-Applications-with-Supabase</li> </ul>"},{"location":"#books","title":"Books","text":""},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2025/06/11/-what-is-npx-really/","title":"\ud83d\udd27 What Is npx Really?","text":""},{"location":"blog/2025/06/11/-what-is-npx-really/#what-is-npx-really","title":"\ud83d\udd27 What Is npx Really?","text":"<p><code>npx</code> is a CLI tool that comes with <code>npm</code> (Node Package Manager). It's designed to execute binaries (i.e., CLI tools) from Node packages \u2014 without requiring a global installation.</p> <p>Introduced in <code>npm 5.2.0</code>, <code>npx</code> is especially useful for:</p> <ul> <li>Running commands from packages that aren\u2019t installed globally</li> <li>Testing packages quickly</li> <li>Running scripts from your <code>node_modules/.bin</code></li> <li>Executing GitHub gists or remote code</li> </ul>"},{"location":"blog/2025/06/11/-what-is-npx-really/#how-npx-works-internals","title":"\ud83e\udde0 How npx Works (Internals)","text":"<p>When you type:</p> <pre><code>npx &lt;package&gt; [...args]\n</code></pre> <p>Here\u2019s what happens behind the scenes:</p> <ol> <li> <p>Resolution Phase</p> <ul> <li>Checks if the package name is a local binary in <code>node_modules/.bin</code></li> <li>If not found, queries the npm registry for the package</li> <li>Downloads it to a temporary directory (e.g., <code>/tmp</code>) if not locally installed</li> </ul> </li> <li> <p>Execution Phase</p> <ul> <li>Executes the binary, passing any arguments you gave</li> <li>Uses the environment (like <code>PATH</code>) to include that temporary binary location</li> </ul> </li> <li> <p>Cleanup Phase</p> <ul> <li>Deletes the temporary installation unless <code>--no-delete</code> is used</li> <li>Leaves no trace unless explicitly told to persist (via <code>--package</code> or installation)</li> </ul> </li> </ol>"},{"location":"blog/2025/06/11/-what-is-npx-really/#practical-examples","title":"\ud83e\uddea Practical Examples","text":"<ol> <li> <p>Run a one-time CLI command:</p> <pre><code>npx cowsay \"Hello from npx!\"\n</code></pre> <p>This uses the <code>cowsay</code> package temporarily and prints a cow saying your message.</p> </li> <li> <p>Run a package script locally (without installing globally):</p> <pre><code>npx eslint src/\n</code></pre> <p>This executes <code>eslint</code> from <code>node_modules/.bin</code> if it exists, or downloads it if not.</p> </li> <li> <p>Create new projects (scaffolders):</p> <pre><code>npx create-react-app my-app\n</code></pre> <p>No need to globally install <code>create-react-app</code>; <code>npx</code> ensures you're using the latest version every time.</p> </li> <li> <p>Execute a specific version of a package:</p> <pre><code>npx -p typescript@4.8 tsc --version\n</code></pre> <p>This installs and runs TypeScript 4.8 specifically.</p> </li> <li> <p>Run a GitHub-hosted package (advanced):</p> <pre><code>npx github:username/repo\n</code></pre> <p>You can even run GitHub packages directly.</p> </li> </ol>"},{"location":"blog/2025/06/11/-what-is-npx-really/#gotchas-tips","title":"\u26a0\ufe0f Gotchas &amp; Tips","text":"<ul> <li> <p>npm 7+ deprecates <code>npx</code> in favor of <code>npm exec</code>. (<code>npm exec</code> is safer and more consistent in scripts.)</p> <pre><code>npm exec -- package-name\n</code></pre> </li> <li> <p>Slow on first run: If the package isn't cached, it downloads every time.</p> </li> <li> <p>You can override the binary name with:</p> <pre><code>npx --package cowsay \"cowsay\" \"Hello!\"\n</code></pre> </li> <li> <p>Aliases and scripts can benefit: In <code>package.json</code> scripts, use <code>npx</code> to avoid setup for tools like Prettier, ESLint, etc.</p> </li> </ul>"},{"location":"blog/2025/06/11/-what-is-npx-really/#advanced-flags","title":"\ud83d\udee0 Advanced Flags","text":"Flag Description <code>--package</code> or <code>-p</code> Use this specific package <code>--yes</code> or <code>-y</code> Skip prompts (especially useful for GitHub commands) <code>--node-arg=--foo</code> Pass Node.js args directly <code>--call</code> Used with scripts that return functions <code>--no-install</code> Avoid downloading if not found locally <code>--shell</code> Force command to run in shell"},{"location":"blog/2025/06/11/-what-is-npx-really/#npx-vs-npm-exec","title":"\ud83e\udde0 <code>npx</code> vs <code>npm exec</code>","text":"Feature <code>npx</code> <code>npm exec</code> Legacy support \u2705 \u274c (newer) CLI flexibility \u2705 \u2705 Consistent behavior \u274c (some quirks) \u2705 Recommended future \u274c \u2705"},{"location":"blog/2025/06/11/-what-is-npx-really/#summary","title":"Summary","text":"Concept npx Behavior Global install? \u274c No need Caching? \u2705 Yes (short-term) Auto install? \u2705 Yes (unless <code>--no-install</code>) Runs local bin? \u2705 Priority over remote Supports versioning? \u2705 Yes Executes scripts? \u2705 Easily"},{"location":"db/firebase/overview/","title":"Firebase","text":""},{"location":"db/supabase/history/","title":"History","text":""},{"location":"db/supabase/history/#history","title":"History","text":""},{"location":"db/supabase/history/#unveiling-the-inner-workings-of-supabase-and-introducing-the-books-project","title":"Unveiling the Inner Workings of Supabase and Introducing the Book\u2019s Project","text":"<p>In 2000, I started playing around with HTML, which had been around for 10 years at the time. Google, which was then only two years old, was already becoming popular. Back then, the internet was slow and expensive, and my connection was a snail-paced 56 Kbps, miles behind today\u2019s lightning-fast 1 Gbps, which is 18,000 times faster.</p> <p>However, it was a great time to start with web development as the field wasn\u2019t overly complex. Making dynamic websites typically meant using PHP and MySQL, and things such as \u201cJavaScript Frameworks\u201d did not even exist yet. At that time, authentication was simpler but not very secure, and HTTPS (which is represented by the padlock icon in your browser) was rare. To log in, you had to enter a username and password on a website, and the server created a session cookie to connect you to your account on the backend</p> <p>Fast forward to today, when starting out with web development can be confusing. There are tons of libraries, frameworks, and tech choices to make.</p> <p>However, as most of them are some kind of interactive service, there are underlying needs such as file storage, databases, and authentication that are always the same for each project. That\u2019s where Platform as a Service/Backend as a Service (PaaS/BaaS) comes in.</p> <p>Supabase is a standout option for this. Choosing Supabase will save you lots of time, as I can personally attest\u2014usually multiple weeks or even months of work. Even if all you need is a database to store data in, PaaS solutions such as Supabase will allow you to iteratively add the capabilities of the PaaS solution to your application.</p>"},{"location":"db/supabase/history/#reference","title":"Reference","text":"<ul> <li>Building Production-Grade Web Applications with Supabase by David Lorenz</li> </ul>"},{"location":"db/supabase/installation/","title":"Installation","text":""},{"location":"db/supabase/installation/#installation","title":"Installation","text":"Install the Supabase library in your project<pre><code>npm install @supabase/supabase-js\n</code></pre>"},{"location":"db/supabase/installation/#installing-the-supabase-cli","title":"Installing the Supabase CLI","text":"bash<pre><code>npm install supabase --save-dev\n</code></pre> <p>Before doing anything else, you\u2019ll want to install the Supabase CLI as it will \u2013 besides other great features \u2013 allow us to spin up a local Supabase instance with no effort.</p> <p>In theory, you can install the Supabase CLI globally with package managers such as brew or scoop. However, from my experience, I advise against them as they usually confuse more than they help, particularly when you have multiple projects, as well as a different version of the Supabase CLI than other people in your team.</p> <p>In short, install the Supabase CLI via <code>npm install supabase --save-dev</code> as a development dependency in every project where you want to use Supabase.</p> <p>Afterward, you can test if the installation succeeded by running <code>npx supabase --help</code>. Running this command should not result in you being asked to install the CLI \u2013since you\u2019ve done that already, it should quickly output helpful information about the CLI.</p>"},{"location":"db/supabase/installation/#running-your-first-supabase-instance-on-your-machine","title":"Running your first Supabase instance on your machine","text":"<p>When you go on supabase.com, sign in, and create a new project, that\u2019s your Supabase instance. However, we want to run an instance locally on our computer. Let\u2019s see how to do that.</p>"},{"location":"db/supabase/installation/#initializing-a-new-local-supabase-instance","title":"\u2b50 Initializing a new local Supabase instance","text":"<p>Having a local installation is crucial in development as it allows us to test things before we deploy them. Hence, even if you plan to use the awesome supabase.com platform, you\u2019ll be better off also having a local installation.</p> bash<pre><code>npx supabase init\n</code></pre> <p>The command also creates a <code>config.toml</code> file in that new directory, which contains a complete, working configuration that the CLI uses to run your local setup. You can have a peek at it but don\u2019t expect to understand it just yet.</p>"},{"location":"db/supabase/installation/#starting-your-first-supabase-instance","title":"\u2b50 Starting your first Supabase instance","text":"<p>Now that you\u2019ve initialized the required files for a local instance, you\u2019ll want to get it up and running so that you get the information from Supabase about the services it started, as well as the credentials it was deployed with.</p> <p>This will contain everything we need to make a connection to Supabase.</p> bash<pre><code>npx supabase start\n</code></pre> <p>So, inside your <code>/your-path/my-project/supabase</code> project folder, call <code>npx supabase start</code>. This will automatically trigger the underlying Docker setup, pull all the required Docker images, and spin them up \u2013 in other words, the command creates and starts a fully running Supabase instance without you having to configure it.</p> <pre><code>Digest: sha256:8ace6e32e26d30a352b55170ff9953b554baa831d7ab61cd0520316793cb3de1\nStatus: Downloaded newer image for public.ecr.aws/supabase/studio:2025.06.02-sha-8f2993d\nStarted supabase local development setup.\n\n         API URL: http://127.0.0.1:54321\n     GraphQL URL: http://127.0.0.1:54321/graphql/v1\n  S3 Storage URL: http://127.0.0.1:54321/storage/v1/s3\n          DB URL: postgresql://postgres:postgres@127.0.0.1:54322/postgres\n      Studio URL: http://127.0.0.1:54323\n    Inbucket URL: http://127.0.0.1:54324\n      JWT secret: super-secret-jwt-token-with-at-least-32-characters-long\n        anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\nservice_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU\n   S3 Access Key: 625729a08b95bf1b7ff351a663f3a23c\n   S3 Secret Key: 850181e4652dd023b7a98c58ae0d2d34bd487ee0cc3254aed6eda37307425907\n       S3 Region: local\n</code></pre> <p>This means your local instance is running. I recommend that you just copy all of the output you receive and save it somewhere for easy access later.</p> Tip <p>The Terminal output provides a summary of the things you\u2019ll need to connect to Supabase (it is not a list of services started). Let\u2019s go through them one by one:</p> <ul> <li> <p>API URL: The connection URL for our Supabase instance. It is the unified URL that takes all your API calls and, depending on the path, forwards them to the correct service to be processed.</p> </li> <li> <p>GraphQL URL: When explaining the PostgREST service in Chapter 1, I mentioned that Supabase allows you to work with GraphQL if that is your preferred way of working. This is the URL you\u2019ll need if you want to fetch data via GraphQL.</p> </li> <li> <p>DB URL: This is the connection URL of the database itself, bypassing the other services. It is already in the form of a PostgreSQL connection string and includes the PostgreSQL protocol, username, and password. For most use cases, you won\u2019t need this DB URL as you will be using the API URL \u2013 or more specifically, the Supabase client \u2013 for everything related to your project.</p> </li> <li> <p>Studio URL: This is the dashboard where we will conveniently manage and structure data within Supabase.</p> </li> <li> <p>Inbucket URL: This is a special service that\u2019s deployed to simplify your local development process. Every application that interacts with users needs to send emails \u2013 for example, when logging in, when changing an email address, or when resetting a password. To send emails, you need an email server. In development mode, you usually don\u2019t want to send out real emails to real people. Instead, you\u2019ll want to check and verify that the content in those emails is correct and functional.</p> <p>Inbucket is a dummy mail server.</p> </li> <li> <p>JWT secret: JWT is the short form of JSON Web Token and is an encrypted JSON-formatted value that usually contains authentication data.</p> </li> <li> <p>anon key: This is the anonymous key that, complementary to the API URL, allows us to connect to our instance with the Supabase library.</p> </li> <li> <p>service_role key: The service role key sounds non-threatening but is the superadmin key and allows any kind of manipulation. You should never use it in the frontend as someone could steal it.</p> </li> </ul>"},{"location":"db/supabase/installation/#managing-multiple-local-supabase-instances","title":"Managing multiple local Supabase instances","text":"<p>Developers often work on many different projects. Running multiple servers of any kind at the same time can be done by changing the port configuration (one on <code>localhost:3000</code>, the other on localhost:3001, and so on). But what if you have three projects, all using their own Supabase instances? Can we have three local Supabase instances run in parallel at the same time? Let\u2019s have a look at the options for how to handle this.</p>"},{"location":"db/supabase/installation/#option-1-the-start-stop-technique","title":"\u2747\ufe0f Option 1 \u2013 the start-stop technique","text":"<p>This is the recommended option when the projects are separated and you can spare a minute to switch between instances.</p> <p>Imagine that you have two projects. If you currently run the instance from project 1, then go to the project directory and run <code>npx supabase stop</code>, it will automatically back up your data locally.</p> <p>Now, if you go to project 2 and run <code>npx supabase start</code>, the project 2 instance will be running and consider the project 1 instance to be in sleep mode.</p>"},{"location":"db/supabase/installation/#option-2-change-ports","title":"\u2747\ufe0f Option 2 \u2013 change ports","text":"<p>Inside <code>config.toml</code>, you can change the ports that Supabase uses for its services. For example, for Studio, you\u2019ll see something like this:</p> <pre><code>[studio]\nport = 54323\n</code></pre> <p>Change <code>port</code> to something unique, such as <code>port=9100</code>. Upon doing this, for this project, your Supabase Studio service will run on <code>localhost:9100</code>.</p> <p>Change port to something unique, such as <code>port=9100</code>. Upon doing this, for this project, your Supabase Studio service will run on <code>localhost:9100</code>.</p>"},{"location":"db/supabase/installation/#connecting-to-supabase-with-the-supabase-javascript-client","title":"Connecting to Supabase with the Supabase JavaScript Client","text":"Install the Supabase library in your project<pre><code>npm install @supabase/supabase-js\n</code></pre>"},{"location":"db/supabase/overview/","title":"Overview","text":""},{"location":"db/supabase/overview/#overview","title":"Overview","text":"<pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt;\n  createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  );\n</code></pre> <p>At this point, you have a function called <code>createSupabaseClient()</code> that initializes a new Supabase client with the given values. This function can now be imported from any other file.</p>"},{"location":"db/supabase/overview/#utilizing-createbrowserclient-on-the-frontend","title":"Utilizing <code>createBrowserClient</code> on the frontend","text":"<p>Let\u2019s start by solving the frontend problem first and then go back and re-evaluate the details of the backend problem.</p> <p>Here, <code>@supabase/supabase-js</code> is always the base package that you install in any JavaScript-based environment where you use the Supabase JavaScript client. Then, there is a complementary package from Supabase called <code>@supabase/ssr</code>. It is framework-independent but wraps functionality to make cookie management easy on both the frontend and backend so that you can log in on the frontend and use the authentication on the backend and vice versa. We\u2019ll use the package to create a frontend Supabase client.</p> <p>Although ssr stands for server-side rendering, it comes packed with a function called <code>createBrowserClient</code>, which solves our first problem, recreation: it is a wrapper on top of the createClient function from <code>@supabase/supabase-js</code> and uses a Singleton pattern. So, you can call it as often as you want, and the client is still just created once.</p> <p>To use it, first, install the package with <code>npm install @supabase/ssr</code>. Then, go to your <code>supabase-utils/client.js</code> file. Here, you will see the following code:</p> <pre><code>import { createClient } from \"@supabase/supabase-js\";\n\nexport const createSupabaseClient = () =&gt; createClient(...);\n</code></pre> <p>Now, replace createClient with the <code>createBrowserClient</code> import, as follows:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\n\nexport const createSupabaseClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>This would be sufficient, but I want to do two more things to add more clarity that this is about the frontend:</p> <ol> <li> <p>First, rename <code>createSupabaseClient</code> to <code>getSupabaseBrowserClient</code> so that it looks like this:</p> <pre><code>import { createBrowserClient } from \"@supabase/ssr\";\nexport const getSupabaseBrowserClient = () =&gt;\ncreateBrowserClient(...);\n</code></pre> <p>Just by changing the name, it\u2019s clearer that we aren\u2019t recreating the client all the time and that we\u2019re supposed to use this on the frontend.</p> </li> <li> <p>Second, rename <code>client.js</code> to <code>browserClient.js</code> as this name provides more details about what it is \u2013 that is, a browser-targeted Supabase client. Don\u2019t forget to adapt your existing <code>createSupabaseClient</code> imports so that they match the name changes.</p> </li> </ol> <p>With that, problem one has been solved. Now, let\u2019s get back to problem two \u2013 the backend.</p>"},{"location":"db/supabase/overview/#reference","title":"Reference","text":"<ul> <li>Building Production-Grade Web Applications with Supabase by David Lorenz</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}